"""
문제
        7
      3   8
    8   1   0
  2   7   4   4
4   5   2   6   5
위 그림은 크기가 5인 정수 삼각형의 한 모습이다.

맨 위층 7부터 시작해서 아래에 있는 수 중 하나를 선택하여 아래층으로 내려올 때,
이제까지 선택된 수의 합이 최대가 되는 경로를 구하는 프로그램을 작성하라.
아래층에 있는 수는 현재 층에서 선택된 수의
대각선 왼쪽 또는 대각선 오른쪽에 있는 것 중에서만 선택할 수 있다.

삼각형의 크기는 1 이상 500 이하이다.
삼각형을 이루고 있는 각 수는 모두 정수이며, 범위는 0 이상 9999 이하이다.

입력
첫째 줄에 삼각형의 크기 n(1 ≤ n ≤ 500)이 주어지고, 둘째 줄부터 n+1번째 줄까지 정수 삼각형이 주어진다.

출력
첫째 줄에 합이 최대가 되는 경로에 있는 수의 합을 출력한다.

5
7
3 8
8 1 0
2 7 4 4
4 5 2 6 5

        7
      3   8
    8   1   0
  2   7   4   4
4   5   2   6   5

7 3 8 7 5


30
"""
n = int(input())  # 삼각형의 크기
triangle = []  # 정수 삼각형을 저장할 리스트

# 정수 삼각형 입력 받기
for _ in range(n):
    row = list(map(int, input().split()))
    triangle.append(row)

# 다이내믹 프로그래밍을 위한 dp 배열 초기화
dp = [[0] * n for _ in range(n)]
dp[0][0] = triangle[0][0]  # 맨 위의 숫자는 그대로 사용

# 다이내믹 프로그래밍 진행
for i in range(1, n):
    for j in range(i + 1):
        # 왼쪽 위에서 온 경우와 오른쪽 위에서 온 경우 중 큰 값을 선택하여 현재 위치에 더함
        if j == 0:  # 맨 왼쪽 열
            dp[i][j] = dp[i - 1][j] + triangle[i][j]
        elif j == i:  # 맨 오른쪽 열
            dp[i][j] = dp[i - 1][j - 1] + triangle[i][j]
        else:
            dp[i][j] = max(dp[i - 1][j - 1], dp[i - 1][j]) + triangle[i][j]

# dp 배열의 마지막 행에서 최댓값을 찾아 출력
max_sum = max(dp[n - 1])
print(max_sum)